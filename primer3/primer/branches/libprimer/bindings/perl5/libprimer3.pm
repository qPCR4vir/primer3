# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.

package libprimer3;
require Exporter;
require DynaLoader;
@ISA = qw(Exporter DynaLoader);
package libprimer3c;
bootstrap libprimer3;
package libprimer3;
@EXPORT = qw( );

# ---------- BASE METHODS -------------

package libprimer3;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package libprimer3;

*set_default_global_primer_args = *libprimer3c::set_default_global_primer_args;
*primer3_create = *libprimer3c::primer3_create;
*read_record = *libprimer3c::read_record;
*primer3_choose = *libprimer3c::primer3_choose;
*pr_append_new_chunk = *libprimer3c::pr_append_new_chunk;
*format_pairs = *libprimer3c::format_pairs;
*boulder_print_pairs = *libprimer3c::boulder_print_pairs;
*format_oligos = *libprimer3c::format_oligos;
*boulder_print_oligos = *libprimer3c::boulder_print_oligos;
*free_record = *libprimer3c::free_record;
*primer3_destroy = *libprimer3c::primer3_destroy;

############# Class : libprimer3::program_args ##############

package libprimer3::program_args;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( libprimer3 );
%OWNER = ();
%ITERATORS = ();
*swig_format_output_get = *libprimer3c::program_args_format_output_get;
*swig_format_output_set = *libprimer3c::program_args_format_output_set;
*swig_twox_compat_get = *libprimer3c::program_args_twox_compat_get;
*swig_twox_compat_set = *libprimer3c::program_args_twox_compat_set;
*swig_strict_tags_get = *libprimer3c::program_args_strict_tags_get;
*swig_strict_tags_set = *libprimer3c::program_args_strict_tags_set;
sub new {
    my $pkg = shift;
    my $self = libprimer3c::new_program_args(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        libprimer3c::delete_program_args($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : libprimer3::seq_lib ##############

package libprimer3::seq_lib;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( libprimer3 );
%OWNER = ();
%ITERATORS = ();
*swig_names_get = *libprimer3c::seq_lib_names_get;
*swig_names_set = *libprimer3c::seq_lib_names_set;
*swig_seqs_get = *libprimer3c::seq_lib_seqs_get;
*swig_seqs_set = *libprimer3c::seq_lib_seqs_set;
*swig_rev_compl_seqs_get = *libprimer3c::seq_lib_rev_compl_seqs_get;
*swig_rev_compl_seqs_set = *libprimer3c::seq_lib_rev_compl_seqs_set;
*swig_weight_get = *libprimer3c::seq_lib_weight_get;
*swig_weight_set = *libprimer3c::seq_lib_weight_set;
*swig_repeat_file_get = *libprimer3c::seq_lib_repeat_file_get;
*swig_repeat_file_set = *libprimer3c::seq_lib_repeat_file_set;
*swig_error_get = *libprimer3c::seq_lib_error_get;
*swig_error_set = *libprimer3c::seq_lib_error_set;
*swig_warning_get = *libprimer3c::seq_lib_warning_get;
*swig_warning_set = *libprimer3c::seq_lib_warning_set;
*swig_seq_num_get = *libprimer3c::seq_lib_seq_num_get;
*swig_seq_num_set = *libprimer3c::seq_lib_seq_num_set;
sub new {
    my $pkg = shift;
    my $self = libprimer3c::new_seq_lib(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        libprimer3c::delete_seq_lib($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : libprimer3::primer_args ##############

package libprimer3::primer_args;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( libprimer3 );
%OWNER = ();
%ITERATORS = ();
*swig_pr_min_get = *libprimer3c::primer_args_pr_min_get;
*swig_pr_min_set = *libprimer3c::primer_args_pr_min_set;
*swig_pr_max_get = *libprimer3c::primer_args_pr_max_get;
*swig_pr_max_set = *libprimer3c::primer_args_pr_max_set;
*swig_repeat_lib_get = *libprimer3c::primer_args_repeat_lib_get;
*swig_repeat_lib_set = *libprimer3c::primer_args_repeat_lib_set;
*swig_io_mishyb_library_get = *libprimer3c::primer_args_io_mishyb_library_get;
*swig_io_mishyb_library_set = *libprimer3c::primer_args_io_mishyb_library_set;
*swig_primer_weights_get = *libprimer3c::primer_args_primer_weights_get;
*swig_primer_weights_set = *libprimer3c::primer_args_primer_weights_set;
*swig_io_weights_get = *libprimer3c::primer_args_io_weights_get;
*swig_io_weights_set = *libprimer3c::primer_args_io_weights_set;
*swig_pr_pair_weights_get = *libprimer3c::primer_args_pr_pair_weights_get;
*swig_pr_pair_weights_set = *libprimer3c::primer_args_pr_pair_weights_set;
*swig_glob_err_get = *libprimer3c::primer_args_glob_err_get;
*swig_glob_err_set = *libprimer3c::primer_args_glob_err_set;
*swig_opt_tm_get = *libprimer3c::primer_args_opt_tm_get;
*swig_opt_tm_set = *libprimer3c::primer_args_opt_tm_set;
*swig_min_tm_get = *libprimer3c::primer_args_min_tm_get;
*swig_min_tm_set = *libprimer3c::primer_args_min_tm_set;
*swig_max_tm_get = *libprimer3c::primer_args_max_tm_get;
*swig_max_tm_set = *libprimer3c::primer_args_max_tm_set;
*swig_max_diff_tm_get = *libprimer3c::primer_args_max_diff_tm_get;
*swig_max_diff_tm_set = *libprimer3c::primer_args_max_diff_tm_set;
*swig_opt_gc_content_get = *libprimer3c::primer_args_opt_gc_content_get;
*swig_opt_gc_content_set = *libprimer3c::primer_args_opt_gc_content_set;
*swig_max_gc_get = *libprimer3c::primer_args_max_gc_get;
*swig_max_gc_set = *libprimer3c::primer_args_max_gc_set;
*swig_min_gc_get = *libprimer3c::primer_args_min_gc_get;
*swig_min_gc_set = *libprimer3c::primer_args_min_gc_set;
*swig_salt_conc_get = *libprimer3c::primer_args_salt_conc_get;
*swig_salt_conc_set = *libprimer3c::primer_args_salt_conc_set;
*swig_dna_conc_get = *libprimer3c::primer_args_dna_conc_get;
*swig_dna_conc_set = *libprimer3c::primer_args_dna_conc_set;
*swig_io_opt_tm_get = *libprimer3c::primer_args_io_opt_tm_get;
*swig_io_opt_tm_set = *libprimer3c::primer_args_io_opt_tm_set;
*swig_io_min_tm_get = *libprimer3c::primer_args_io_min_tm_get;
*swig_io_min_tm_set = *libprimer3c::primer_args_io_min_tm_set;
*swig_io_max_tm_get = *libprimer3c::primer_args_io_max_tm_get;
*swig_io_max_tm_set = *libprimer3c::primer_args_io_max_tm_set;
*swig_io_opt_gc_content_get = *libprimer3c::primer_args_io_opt_gc_content_get;
*swig_io_opt_gc_content_set = *libprimer3c::primer_args_io_opt_gc_content_set;
*swig_io_max_gc_get = *libprimer3c::primer_args_io_max_gc_get;
*swig_io_max_gc_set = *libprimer3c::primer_args_io_max_gc_set;
*swig_io_min_gc_get = *libprimer3c::primer_args_io_min_gc_get;
*swig_io_min_gc_set = *libprimer3c::primer_args_io_min_gc_set;
*swig_io_salt_conc_get = *libprimer3c::primer_args_io_salt_conc_get;
*swig_io_salt_conc_set = *libprimer3c::primer_args_io_salt_conc_set;
*swig_io_dna_conc_get = *libprimer3c::primer_args_io_dna_conc_get;
*swig_io_dna_conc_set = *libprimer3c::primer_args_io_dna_conc_set;
*swig_outside_penalty_get = *libprimer3c::primer_args_outside_penalty_get;
*swig_outside_penalty_set = *libprimer3c::primer_args_outside_penalty_set;
*swig_inside_penalty_get = *libprimer3c::primer_args_inside_penalty_get;
*swig_inside_penalty_set = *libprimer3c::primer_args_inside_penalty_set;
*swig_product_max_tm_get = *libprimer3c::primer_args_product_max_tm_get;
*swig_product_max_tm_set = *libprimer3c::primer_args_product_max_tm_set;
*swig_product_min_tm_get = *libprimer3c::primer_args_product_min_tm_get;
*swig_product_min_tm_set = *libprimer3c::primer_args_product_min_tm_set;
*swig_product_opt_tm_get = *libprimer3c::primer_args_product_opt_tm_get;
*swig_product_opt_tm_set = *libprimer3c::primer_args_product_opt_tm_set;
*swig_max_end_stability_get = *libprimer3c::primer_args_max_end_stability_get;
*swig_max_end_stability_set = *libprimer3c::primer_args_max_end_stability_set;
*swig_num_intervals_get = *libprimer3c::primer_args_num_intervals_get;
*swig_num_intervals_set = *libprimer3c::primer_args_num_intervals_set;
*swig_num_ns_accepted_get = *libprimer3c::primer_args_num_ns_accepted_get;
*swig_num_ns_accepted_set = *libprimer3c::primer_args_num_ns_accepted_set;
*swig_primer_task_get = *libprimer3c::primer_args_primer_task_get;
*swig_primer_task_set = *libprimer3c::primer_args_primer_task_set;
*swig_file_flag_get = *libprimer3c::primer_args_file_flag_get;
*swig_file_flag_set = *libprimer3c::primer_args_file_flag_set;
*swig_explain_flag_get = *libprimer3c::primer_args_explain_flag_get;
*swig_explain_flag_set = *libprimer3c::primer_args_explain_flag_set;
*swig_primer_opt_size_get = *libprimer3c::primer_args_primer_opt_size_get;
*swig_primer_opt_size_set = *libprimer3c::primer_args_primer_opt_size_set;
*swig_primer_min_size_get = *libprimer3c::primer_args_primer_min_size_get;
*swig_primer_min_size_set = *libprimer3c::primer_args_primer_min_size_set;
*swig_primer_max_size_get = *libprimer3c::primer_args_primer_max_size_get;
*swig_primer_max_size_set = *libprimer3c::primer_args_primer_max_size_set;
*swig_product_opt_size_get = *libprimer3c::primer_args_product_opt_size_get;
*swig_product_opt_size_set = *libprimer3c::primer_args_product_opt_size_set;
*swig_io_num_ns_accepted_get = *libprimer3c::primer_args_io_num_ns_accepted_get;
*swig_io_num_ns_accepted_set = *libprimer3c::primer_args_io_num_ns_accepted_set;
*swig_io_primer_opt_size_get = *libprimer3c::primer_args_io_primer_opt_size_get;
*swig_io_primer_opt_size_set = *libprimer3c::primer_args_io_primer_opt_size_set;
*swig_io_primer_min_size_get = *libprimer3c::primer_args_io_primer_min_size_get;
*swig_io_primer_min_size_set = *libprimer3c::primer_args_io_primer_min_size_set;
*swig_io_primer_max_size_get = *libprimer3c::primer_args_io_primer_max_size_get;
*swig_io_primer_max_size_set = *libprimer3c::primer_args_io_primer_max_size_set;
*swig_gc_clamp_get = *libprimer3c::primer_args_gc_clamp_get;
*swig_gc_clamp_set = *libprimer3c::primer_args_gc_clamp_set;
*swig_liberal_base_get = *libprimer3c::primer_args_liberal_base_get;
*swig_liberal_base_set = *libprimer3c::primer_args_liberal_base_set;
*swig_max_poly_x_get = *libprimer3c::primer_args_max_poly_x_get;
*swig_max_poly_x_set = *libprimer3c::primer_args_max_poly_x_set;
*swig_io_max_poly_x_get = *libprimer3c::primer_args_io_max_poly_x_get;
*swig_io_max_poly_x_set = *libprimer3c::primer_args_io_max_poly_x_set;
*swig_first_base_index_get = *libprimer3c::primer_args_first_base_index_get;
*swig_first_base_index_set = *libprimer3c::primer_args_first_base_index_set;
*swig_num_return_get = *libprimer3c::primer_args_num_return_get;
*swig_num_return_set = *libprimer3c::primer_args_num_return_set;
*swig_min_quality_get = *libprimer3c::primer_args_min_quality_get;
*swig_min_quality_set = *libprimer3c::primer_args_min_quality_set;
*swig_min_end_quality_get = *libprimer3c::primer_args_min_end_quality_get;
*swig_min_end_quality_set = *libprimer3c::primer_args_min_end_quality_set;
*swig_quality_range_min_get = *libprimer3c::primer_args_quality_range_min_get;
*swig_quality_range_min_set = *libprimer3c::primer_args_quality_range_min_set;
*swig_quality_range_max_get = *libprimer3c::primer_args_quality_range_max_get;
*swig_quality_range_max_set = *libprimer3c::primer_args_quality_range_max_set;
*swig_io_min_quality_get = *libprimer3c::primer_args_io_min_quality_get;
*swig_io_min_quality_set = *libprimer3c::primer_args_io_min_quality_set;
*swig_io_min_end_quality_get = *libprimer3c::primer_args_io_min_end_quality_get;
*swig_io_min_end_quality_set = *libprimer3c::primer_args_io_min_end_quality_set;
*swig_pick_anyway_get = *libprimer3c::primer_args_pick_anyway_get;
*swig_pick_anyway_set = *libprimer3c::primer_args_pick_anyway_set;
*swig_repeat_compl_get = *libprimer3c::primer_args_repeat_compl_get;
*swig_repeat_compl_set = *libprimer3c::primer_args_repeat_compl_set;
*swig_io_repeat_compl_get = *libprimer3c::primer_args_io_repeat_compl_get;
*swig_io_repeat_compl_set = *libprimer3c::primer_args_io_repeat_compl_set;
*swig_pair_repeat_compl_get = *libprimer3c::primer_args_pair_repeat_compl_get;
*swig_pair_repeat_compl_set = *libprimer3c::primer_args_pair_repeat_compl_set;
*swig_self_any_get = *libprimer3c::primer_args_self_any_get;
*swig_self_any_set = *libprimer3c::primer_args_self_any_set;
*swig_self_end_get = *libprimer3c::primer_args_self_end_get;
*swig_self_end_set = *libprimer3c::primer_args_self_end_set;
*swig_io_self_any_get = *libprimer3c::primer_args_io_self_any_get;
*swig_io_self_any_set = *libprimer3c::primer_args_io_self_any_set;
*swig_io_self_end_get = *libprimer3c::primer_args_io_self_end_get;
*swig_io_self_end_set = *libprimer3c::primer_args_io_self_end_set;
*swig_pair_compl_any_get = *libprimer3c::primer_args_pair_compl_any_get;
*swig_pair_compl_any_set = *libprimer3c::primer_args_pair_compl_any_set;
*swig_pair_compl_end_get = *libprimer3c::primer_args_pair_compl_end_get;
*swig_pair_compl_end_set = *libprimer3c::primer_args_pair_compl_end_set;
sub new {
    my $pkg = shift;
    my $self = libprimer3c::new_primer_args(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        libprimer3c::delete_primer_args($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : libprimer3::seq_args ##############

package libprimer3::seq_args;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( libprimer3 );
%OWNER = ();
%ITERATORS = ();
*swig_error_get = *libprimer3c::seq_args_error_get;
*swig_error_set = *libprimer3c::seq_args_error_set;
*swig_warning_get = *libprimer3c::seq_args_warning_get;
*swig_warning_set = *libprimer3c::seq_args_warning_set;
*swig_num_targets_get = *libprimer3c::seq_args_num_targets_get;
*swig_num_targets_set = *libprimer3c::seq_args_num_targets_set;
*swig_tar_get = *libprimer3c::seq_args_tar_get;
*swig_tar_set = *libprimer3c::seq_args_tar_set;
*swig_num_excl_get = *libprimer3c::seq_args_num_excl_get;
*swig_num_excl_set = *libprimer3c::seq_args_num_excl_set;
*swig_excl_get = *libprimer3c::seq_args_excl_get;
*swig_excl_set = *libprimer3c::seq_args_excl_set;
*swig_num_internal_excl_get = *libprimer3c::seq_args_num_internal_excl_get;
*swig_num_internal_excl_set = *libprimer3c::seq_args_num_internal_excl_set;
*swig_excl_internal_get = *libprimer3c::seq_args_excl_internal_get;
*swig_excl_internal_set = *libprimer3c::seq_args_excl_internal_set;
*swig_incl_s_get = *libprimer3c::seq_args_incl_s_get;
*swig_incl_s_set = *libprimer3c::seq_args_incl_s_set;
*swig_incl_l_get = *libprimer3c::seq_args_incl_l_get;
*swig_incl_l_set = *libprimer3c::seq_args_incl_l_set;
*swig_start_codon_pos_get = *libprimer3c::seq_args_start_codon_pos_get;
*swig_start_codon_pos_set = *libprimer3c::seq_args_start_codon_pos_set;
*swig_stop_codon_pos_get = *libprimer3c::seq_args_stop_codon_pos_get;
*swig_stop_codon_pos_set = *libprimer3c::seq_args_stop_codon_pos_set;
*swig_quality_get = *libprimer3c::seq_args_quality_get;
*swig_quality_set = *libprimer3c::seq_args_quality_set;
*swig_sequence_get = *libprimer3c::seq_args_sequence_get;
*swig_sequence_set = *libprimer3c::seq_args_sequence_set;
*swig_sequence_name_get = *libprimer3c::seq_args_sequence_name_get;
*swig_sequence_name_set = *libprimer3c::seq_args_sequence_name_set;
*swig_sequence_file_get = *libprimer3c::seq_args_sequence_file_get;
*swig_sequence_file_set = *libprimer3c::seq_args_sequence_file_set;
*swig_trimmed_seq_get = *libprimer3c::seq_args_trimmed_seq_get;
*swig_trimmed_seq_set = *libprimer3c::seq_args_trimmed_seq_set;
*swig_left_input_get = *libprimer3c::seq_args_left_input_get;
*swig_left_input_set = *libprimer3c::seq_args_left_input_set;
*swig_right_input_get = *libprimer3c::seq_args_right_input_get;
*swig_right_input_set = *libprimer3c::seq_args_right_input_set;
*swig_internal_input_get = *libprimer3c::seq_args_internal_input_get;
*swig_internal_input_set = *libprimer3c::seq_args_internal_input_set;
*swig_left_expl_get = *libprimer3c::seq_args_left_expl_get;
*swig_left_expl_set = *libprimer3c::seq_args_left_expl_set;
*swig_right_expl_get = *libprimer3c::seq_args_right_expl_get;
*swig_right_expl_set = *libprimer3c::seq_args_right_expl_set;
*swig_intl_expl_get = *libprimer3c::seq_args_intl_expl_get;
*swig_intl_expl_set = *libprimer3c::seq_args_intl_expl_set;
*swig_pair_expl_get = *libprimer3c::seq_args_pair_expl_get;
*swig_pair_expl_set = *libprimer3c::seq_args_pair_expl_set;
sub new {
    my $pkg = shift;
    my $self = libprimer3c::new_seq_args(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        libprimer3c::delete_seq_args($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : libprimer3::dpal_args ##############

package libprimer3::dpal_args;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( libprimer3 );
%OWNER = ();
%ITERATORS = ();
*swig_check_chars_get = *libprimer3c::dpal_args_check_chars_get;
*swig_check_chars_set = *libprimer3c::dpal_args_check_chars_set;
*swig_debug_get = *libprimer3c::dpal_args_debug_get;
*swig_debug_set = *libprimer3c::dpal_args_debug_set;
*swig_fail_stop_get = *libprimer3c::dpal_args_fail_stop_get;
*swig_fail_stop_set = *libprimer3c::dpal_args_fail_stop_set;
*swig_flag_get = *libprimer3c::dpal_args_flag_get;
*swig_flag_set = *libprimer3c::dpal_args_flag_set;
*swig_force_generic_get = *libprimer3c::dpal_args_force_generic_get;
*swig_force_generic_set = *libprimer3c::dpal_args_force_generic_set;
*swig_force_long_generic_get = *libprimer3c::dpal_args_force_long_generic_get;
*swig_force_long_generic_set = *libprimer3c::dpal_args_force_long_generic_set;
*swig_force_long_maxgap1_get = *libprimer3c::dpal_args_force_long_maxgap1_get;
*swig_force_long_maxgap1_set = *libprimer3c::dpal_args_force_long_maxgap1_set;
*swig_gap_get = *libprimer3c::dpal_args_gap_get;
*swig_gap_set = *libprimer3c::dpal_args_gap_set;
*swig_gapl_get = *libprimer3c::dpal_args_gapl_get;
*swig_gapl_set = *libprimer3c::dpal_args_gapl_set;
*swig_max_gap_get = *libprimer3c::dpal_args_max_gap_get;
*swig_max_gap_set = *libprimer3c::dpal_args_max_gap_set;
*swig_score_max_get = *libprimer3c::dpal_args_score_max_get;
*swig_score_max_set = *libprimer3c::dpal_args_score_max_set;
*swig_score_only_get = *libprimer3c::dpal_args_score_only_get;
*swig_score_only_set = *libprimer3c::dpal_args_score_only_set;
*swig_ssm_get = *libprimer3c::dpal_args_ssm_get;
*swig_ssm_set = *libprimer3c::dpal_args_ssm_set;
sub new {
    my $pkg = shift;
    my $self = libprimer3c::new_dpal_args(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        libprimer3c::delete_dpal_args($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : libprimer3::primer_state ##############

package libprimer3::primer_state;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( libprimer3 );
%OWNER = ();
%ITERATORS = ();
*swig_local_args_get = *libprimer3c::primer_state_local_args_get;
*swig_local_args_set = *libprimer3c::primer_state_local_args_set;
*swig_local_end_args_get = *libprimer3c::primer_state_local_end_args_get;
*swig_local_end_args_set = *libprimer3c::primer_state_local_end_args_set;
*swig_end_args_get = *libprimer3c::primer_state_end_args_get;
*swig_end_args_set = *libprimer3c::primer_state_end_args_set;
*swig_local_args_ambig_get = *libprimer3c::primer_state_local_args_ambig_get;
*swig_local_args_ambig_set = *libprimer3c::primer_state_local_args_ambig_set;
*swig_local_end_args_ambig_get = *libprimer3c::primer_state_local_end_args_ambig_get;
*swig_local_end_args_ambig_set = *libprimer3c::primer_state_local_end_args_ambig_set;
*swig_f_get = *libprimer3c::primer_state_f_get;
*swig_f_set = *libprimer3c::primer_state_f_set;
*swig_r_get = *libprimer3c::primer_state_r_get;
*swig_r_set = *libprimer3c::primer_state_r_set;
*swig_mid_get = *libprimer3c::primer_state_mid_get;
*swig_mid_set = *libprimer3c::primer_state_mid_set;
*swig_n_f_get = *libprimer3c::primer_state_n_f_get;
*swig_n_f_set = *libprimer3c::primer_state_n_f_set;
*swig_n_r_get = *libprimer3c::primer_state_n_r_get;
*swig_n_r_set = *libprimer3c::primer_state_n_r_set;
*swig_n_m_get = *libprimer3c::primer_state_n_m_get;
*swig_n_m_set = *libprimer3c::primer_state_n_m_set;
*swig_f_len_get = *libprimer3c::primer_state_f_len_get;
*swig_f_len_set = *libprimer3c::primer_state_f_len_set;
*swig_r_len_get = *libprimer3c::primer_state_r_len_get;
*swig_r_len_set = *libprimer3c::primer_state_r_len_set;
*swig_mid_len_get = *libprimer3c::primer_state_mid_len_get;
*swig_mid_len_set = *libprimer3c::primer_state_mid_len_set;
*swig_best_pairs_get = *libprimer3c::primer_state_best_pairs_get;
*swig_best_pairs_set = *libprimer3c::primer_state_best_pairs_set;
*swig_err_get = *libprimer3c::primer_state_err_get;
*swig_err_set = *libprimer3c::primer_state_err_set;
sub new {
    my $pkg = shift;
    my $self = libprimer3c::new_primer_state(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        libprimer3c::delete_primer_state($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : libprimer3::primer_error ##############

package libprimer3::primer_error;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( libprimer3 );
%OWNER = ();
%ITERATORS = ();
*swig_system_errno_get = *libprimer3c::primer_error_system_errno_get;
*swig_system_errno_set = *libprimer3c::primer_error_system_errno_set;
*swig_local_errno_get = *libprimer3c::primer_error_local_errno_get;
*swig_local_errno_set = *libprimer3c::primer_error_local_errno_set;
*swig_error_msg_get = *libprimer3c::primer_error_error_msg_get;
*swig_error_msg_set = *libprimer3c::primer_error_error_msg_set;
*swig_jmpenv_get = *libprimer3c::primer_error_jmpenv_get;
*swig_jmpenv_set = *libprimer3c::primer_error_jmpenv_set;
sub new {
    my $pkg = shift;
    my $self = libprimer3c::new_primer_error(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        libprimer3c::delete_primer_error($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : libprimer3::pr_append_str ##############

package libprimer3::pr_append_str;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( libprimer3 );
%OWNER = ();
%ITERATORS = ();
*swig_storage_size_get = *libprimer3c::pr_append_str_storage_size_get;
*swig_storage_size_set = *libprimer3c::pr_append_str_storage_size_set;
*swig_data_get = *libprimer3c::pr_append_str_data_get;
*swig_data_set = *libprimer3c::pr_append_str_data_set;
sub new {
    my $pkg = shift;
    my $self = libprimer3c::new_pr_append_str(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        libprimer3c::delete_pr_append_str($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package libprimer3;

*PR_MAX_INTERVAL_ARRAY = *libprimer3c::PR_MAX_INTERVAL_ARRAY;
*OT_LEFT = *libprimer3c::OT_LEFT;
*OT_RIGHT = *libprimer3c::OT_RIGHT;
*OT_INTL = *libprimer3c::OT_INTL;
1;
